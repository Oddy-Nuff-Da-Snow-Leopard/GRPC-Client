apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'
apply plugin: 'AndResGuard'
apply plugin: 'io.michaelrocks.paranoid'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {

    compileSdkVersion 30
    buildToolsVersion '30.0.2'

    defaultConfig {
        applicationId 'com.logicway.grpcclient'
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'x86'
        }

    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.12.0' }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.32.2'
        }
        rxgrpc {
            artifact = "com.salesforce.servicelibs:rxgrpc:1.0.1"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { option 'lite' }
            }
            task.plugins {
                grpc {
                    option 'lite'
                }
                rxgrpc {}
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'
    implementation 'androidx.lifecycle:lifecycle-process:2.2.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation 'io.grpc:grpc-okhttp:1.32.2'
    implementation 'io.grpc:grpc-protobuf-lite:1.32.2'
    implementation 'io.grpc:grpc-stub:1.32.2'
    implementation 'io.grpc:grpc-netty-shaded:1.32.2'

    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    implementation 'com.google.android.gms:play-services-ads:19.5.0'

    implementation 'com.squareup.okhttp3:okhttp:4.9.0'

    implementation 'org.jsoup:jsoup:1.11.3'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation files('libs/YouTubeAndroidPlayerApi.jar')

    implementation 'com.github.HaarigerHarald:android-youtubeExtractor:master-SNAPSHOT'

    implementation 'com.facebook.network.connectionclass:connectionclass:1.0.1'

    implementation "com.salesforce.servicelibs:rxgrpc-stub:1.0.1"

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'

}

def classesDir = "${buildDir}/intermediates/javac/debug/classes";

def dxCommand = "dx.bat"
def dexLibFileName = "id_getter.dex"

def assetsDir = new File(projectDir, 'src/main/assets')

def jniDir = "${projectDir}/src/main/jni";
def ndkBuildCommand = "ndk-build.cmd"

def dexFileName = "classes.dex"

task encrypt(type: JavaExec) {
    classpath "${classesDir}"
    main = "com.logicway.grpcclient.security.DexClassEncryptor"
    args "-encrypt", "${libsDir}", "${dexFileName}"
}

def listOfFiles = [
        "com/logicway/grpcclient/service/asynctask/okhttp/DownloadFileTask.class",
        "com/logicway/grpcclient/service/asynctask/okhttp/GenerateRandomCommandTask.class"
]

def archiveFileName = "classes.jar"

task makeJar(type: Jar) {
    from classesDir
    archiveName archiveFileName
    include listOfFiles
}

task finalize(dependsOn: makeJar) {
    doFirst {
        listOfFiles.each {
            project.delete "${classesDir}/${it}"
        }
    }
    doLast {
        println("Making .dex lib")
        exec {
            workingDir { classesDir }
            commandLine dxCommand, "--dex", "--output=${dexLibFileName}", "com/logicway/grpcclient/lib/IdGetter.class"
        }
        copy {
            from "${classesDir}/${dexLibFileName}"
            into "${assetsDir}"
        }
        project.delete "${classesDir}/${dexLibFileName}"

        println("Making .so lib")
        exec {
            workingDir { jniDir }
            commandLine ndkBuildCommand
        }

        println("Making dex file from jar")
        exec {
            workingDir { libsDir }
            commandLine dxCommand, "--dex", "--output=${dexFileName}", "classes.jar"
        }

        println("Encrypting")
        encrypt.exec()
        copy {
            from "${libsDir}/${dexFileName}"
            into "${assetsDir}"
        }

//        println("Making dex file")
//        exec {
//            workingDir { classesDir }
//            commandLine dxCommand, "--dex", "--output=${dexFileName}", "com/logicway/grpcresearch/asynctask/okhttp/DownloadFileTask.class"
//        }
//        project.delete "${classesDir}/com/logicway/grpcresearch/asynctask/okhttp/DownloadFileTask.class"
//
//        println("Encrypting")
//        encrypt.exec()
//        copy {
//            from "${classesDir}/${dexFileName}"
//            into "${assetsDir}"
//        }
//        project.delete "${classesDir}/${dexFileName}"
    }
}

tasks.withType(JavaCompile) { compileTask -> compileTask.finalizedBy finalize }

paranoid {

}

andResGuard {
    // mappingFile = file("./resource_mapping.txt")
    mappingFile = null
    use7zip = true
    useSign = true
    // It will keep the origin path of your resources when it's true
    keepRoot = false
    // If set, name column in arsc those need to proguard will be kept to this value
    fixedResName = "arg"
    // It will merge the duplicated resources, but don't rely on this feature too much.
    // it's always better to remove duplicated resource from repo
    mergeDuplicatedRes = true
    whiteList = [
            // your icon
            "R.drawable.icon",
            // for fabric
            "R.string.com.crashlytics.*",
            // for google-services
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key",
            "R.string.project_id",
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
    ]

    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.19'
        //path = "/usr/local/bin/7za"
    }

    /**
     * Optional: if finalApkBackupPath is null, AndResGuard will overwrite final apk
     * to the path which assemble[Task] write to
     **/
    // finalApkBackupPath = "${project.rootDir}/final.apk"

    /**
     * Optional: Specifies the name of the message digest algorithm to user when digesting the entries of JAR file
     * Only works in V1signing, default value is "SHA-1"
     **/
    // digestalg = "SHA-256"
}


